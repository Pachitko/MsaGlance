user nginx;

worker_processes auto;

events {
    worker_connections 1024;
    multi_accept off;
    # use epool;
}

# access_log /etc/nginx/logs/access.log combined;
# error_log /etc/nginx/logs/error.log error;

http {
    gzip on;
    gzip_vary on;
    gzip_http_version 1.0;
    gzip_comp_level 5;
    gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/rss+xml
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/svg+xml
    image/x-icon
    text/css
    text/plain
    text/x-component;
    gzip_proxied no-cache no-store private expired auth;
    gzip_min_length 256;
    gunzip on;

    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 60s;
    open_file_cache_min_uses 1;
    open_file_cache_errors off;

    client_body_buffer_size 16k;
    client_header_buffer_size 1k;
    client_max_body_size 1m;
    large_client_header_buffers 2 1k;

    client_body_timeout 15s;
    client_header_timeout 15s;

    # ms
    keepalive_timeout 500;

    # seconds
    send_timeout 10;

    # hide nginx version information
    server_tokens off;

    include /etc/nginx/mime.types;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # iframe'ы отображаются только с одного и того же домена
    add_header X-Frame-Opions SAMEORIGIN;

    add_header Strict-Transport-Security "max-age=315360000";


    upstream tempo_disk_upstream {
        server tempo_disk:80;
    }

    server {
        listen 80;
        listen 443 ssl;

        server_name shibaevty.ru localhost;

        ssl_certificate /etc/nginx/ssl/shibaevty.crt;
        ssl_certificate_key /etc/nginx/ssl/shibaevty.key;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        # ssl_prefer_server_ciphers on;

        # Treat invalid paths as bad requests
        error_page 404 = @400;

        # Do not send backend errors to client
        proxy_intercept_errors on;

        # API client-friendly JSON errors
        include api_json_errors.conf;

        # If no content-type, assume JSON
        default_type application/json;

        location /home {
            rewrite ^ /;
        }

        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ =404;
            access_log off;
            error_log off;
        }

        location /api {
            proxy_pass http://tempo_disk_upstream/api;
            add_header proxy toClient;
            proxy_set_header proxy toBackend;
            # return 200 'Api s';
        }
    }
}
